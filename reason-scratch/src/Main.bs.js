// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");

function longest(str1, str2) {
  var combinedStr = str1 + str2;
  return combinedStr.split("").reduce((function (acc, $$char) {
                    var match = acc.includes($$char);
                    if (match) {
                      return acc;
                    } else {
                      return acc.concat(/* array */[$$char]);
                    }
                  }), /* array */[]).sort().join("");
}

var answeredQuestions = /* array */[
  /* record */[
    /* number */1,
    /* state : Wrong */[/* Very */2],
    /* category : Math */0
  ],
  /* record */[
    /* number */2,
    /* state : Wrong */[/* Kinda */1],
    /* category : Science */1
  ],
  /* record */[
    /* number */3,
    /* state : Correct */0,
    /* category : Math */0
  ]
];

console.log("[Reason]: Process answers");

console.log(answeredQuestions.filter((function (param) {
              if (param[/* state */1] && param[/* category */2]) {
                return true;
              } else {
                return false;
              }
            })).map((function (q) {
            return q[/* number */0];
          })));

var jsMapperConstantArray = /* array */[
  /* tuple */[
    627136509,
    "ELECTRIC"
  ],
  /* tuple */[
    781516758,
    "Fire"
  ]
];

function pokemonTypesToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function pokemonTypesFromJs(param) {
  return Js_mapperRt.revSearchAssert(2, jsMapperConstantArray, param);
}

function pokemonToJs(param) {
  return {
          name: param[/* name */0],
          type: param[/* _type */1],
          level: param[/* level */2]
        };
}

function pokemonFromJs(param) {
  return /* record */[
          /* name */param.name,
          /* _type */param.type,
          /* level */param.level
        ];
}

function bringInPokemonFromJs(jsPokemon) {
  return jsPokemon.map((function (pokemon) {
                return /* record */[
                        /* name */pokemon.name,
                        /* _type */pokemonTypesFromJs(pokemon.type),
                        /* level */pokemon.level
                      ];
              }));
}

function formatPokemonForJs(rePokemon) {
  return rePokemon.map((function (pokemon) {
                return {
                        name: pokemon[/* name */0],
                        type: pokemonTypesToJs(pokemon[/* _type */1]),
                        level: pokemon[/* level */2]
                      };
              }));
}

var pokemonDataTyped = bringInPokemonFromJs(pokemon);

console.log("[Reason]: Electric pokemon with level greater than 70");

console.log(formatPokemonForJs(pokemonDataTyped.filter((function (param) {
                if (param[/* _type */1] !== 627136509) {
                  return false;
                } else {
                  return param[/* level */2] > 70;
                }
              }))));

exports.longest = longest;
exports.answeredQuestions = answeredQuestions;
exports.pokemonTypesToJs = pokemonTypesToJs;
exports.pokemonTypesFromJs = pokemonTypesFromJs;
exports.pokemonToJs = pokemonToJs;
exports.pokemonFromJs = pokemonFromJs;
exports.bringInPokemonFromJs = bringInPokemonFromJs;
exports.formatPokemonForJs = formatPokemonForJs;
exports.pokemonDataTyped = pokemonDataTyped;
/*  Not a pure module */
