// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var External = require("./External");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");

function longest(str1, str2) {
  var combinedStr = str1 + str2;
  return combinedStr.split("").reduce((function (acc, $$char) {
                    var match = acc.includes($$char);
                    if (match) {
                      return acc;
                    } else {
                      return acc.concat(/* array */[$$char]);
                    }
                  }), /* array */[]).sort().join("");
}

var answeredQuestions = /* array */[
  /* record */[
    /* number */1,
    /* state : Wrong */[/* Very */2],
    /* category : Math */0
  ],
  /* record */[
    /* number */2,
    /* state : Wrong */[/* Kinda */1],
    /* category : Science */1
  ],
  /* record */[
    /* number */3,
    /* state : Correct */0,
    /* category : Math */0
  ]
];

console.log("[Reason]: Process answers");

console.log(answeredQuestions.filter((function (param) {
              if (param[/* state */1] && param[/* category */2]) {
                return true;
              } else {
                return false;
              }
            })).map((function (q) {
            return q[/* number */0];
          })));

var jsMapperConstantArray = /* array */[
  /* tuple */[
    627136509,
    "ELECTRIC"
  ],
  /* tuple */[
    781516758,
    "FIRE"
  ]
];

function pokemonTypesToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function pokemonTypesFromJs(param) {
  return Js_mapperRt.revSearchAssert(2, jsMapperConstantArray, param);
}

function pokemonToJs(param) {
  return {
          name: param[/* name */0],
          type: param[/* _type */1],
          level: param[/* level */2],
          image: param[/* image */3]
        };
}

function pokemonFromJs(param) {
  return /* record */[
          /* name */param.name,
          /* _type */param.type,
          /* level */param.level,
          /* image */param.image
        ];
}

var pokemonData = External.pokemon;

function bringInPokemonFromJs(jsPokemon) {
  return jsPokemon.map((function (pokemon) {
                return /* record */[
                        /* name */pokemon.name,
                        /* _type */pokemonTypesFromJs(pokemon.type),
                        /* level */pokemon.level,
                        /* image */pokemon.image
                      ];
              }));
}

function formatPokemonForJs(rePokemon) {
  return rePokemon.map((function (pokemon) {
                return {
                        name: pokemon[/* name */0],
                        type: pokemonTypesToJs(pokemon[/* _type */1]),
                        level: pokemon[/* level */2],
                        image: pokemon[/* image */3]
                      };
              }));
}

var pokemonDataTyped = bringInPokemonFromJs(pokemonData);

function str(prim) {
  return prim;
}

function filter(prim, prim$1) {
  return prim$1.filter(Curry.__1(prim));
}

function map(prim, prim$1) {
  return prim$1.map(Curry.__1(prim));
}

function Main$App(Props) {
  var pokemon = Props.pokemon;
  var prim = pokemon.filter((function (param) {
          var level = param[/* level */2];
          if (level > 70) {
            return true;
          } else {
            return level < 10;
          }
        }));
  return React.createElement("div", {
              className: "reason-app app"
            }, React.createElement("h2", undefined, "Reason React"), prim.map((function (p) {
                    return React.createElement("figure", {
                                key: p[/* name */0],
                                className: "pokemon"
                              }, React.createElement("img", {
                                    src: p[/* image */3]
                                  }), React.createElement("figcaption", undefined, p[/* name */0]));
                  })));
}

var App = /* module */[/* make */Main$App];

ReactDOMRe.renderToElementWithId(React.createElement(Main$App, {
          pokemon: pokemonDataTyped
        }), "reason-app");

function let_(promise, $$continue) {
  return promise.then(Curry.__1($$continue));
}

var Async = /* module */[/* let_ */let_];

function fetchFromCache(param) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        return resolve("foo");
                      }), 10);
                return /* () */0;
              }));
}

function fetchFromDb(param) {
  return new Promise((function (resolve, param) {
                setTimeout((function (param) {
                        return resolve("bar");
                      }), 10);
                return /* () */0;
              }));
}

var testFn = let_(fetchFromCache(/* () */0), (function (fromCache) {
        return let_(fetchFromDb(/* () */0), (function (fromDb) {
                      console.log("FROM CACHE", fromCache);
                      console.log("FROM DB", fromDb);
                      return Promise.resolve(/* () */0);
                    }));
      }));

var myExternalJs = /* () */0;

exports.myExternalJs = myExternalJs;
exports.longest = longest;
exports.answeredQuestions = answeredQuestions;
exports.pokemonTypesToJs = pokemonTypesToJs;
exports.pokemonTypesFromJs = pokemonTypesFromJs;
exports.pokemonToJs = pokemonToJs;
exports.pokemonFromJs = pokemonFromJs;
exports.pokemonData = pokemonData;
exports.bringInPokemonFromJs = bringInPokemonFromJs;
exports.formatPokemonForJs = formatPokemonForJs;
exports.pokemonDataTyped = pokemonDataTyped;
exports.str = str;
exports.filter = filter;
exports.map = map;
exports.App = App;
exports.Async = Async;
exports.fetchFromCache = fetchFromCache;
exports.fetchFromDb = fetchFromDb;
exports.testFn = testFn;
/*  Not a pure module */
