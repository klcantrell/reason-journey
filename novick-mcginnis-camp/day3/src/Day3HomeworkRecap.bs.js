// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var stringOfUniques = List.map((function (str) {
        return String(str);
      }), List.rev(List.sort_uniq(Caml_obj.caml_compare, /* :: */[
              8,
              /* :: */[
                5,
                /* :: */[
                  3,
                  /* :: */[
                    5,
                    /* :: */[
                      2,
                      /* :: */[
                        6,
                        /* :: */[
                          2,
                          /* :: */[
                            5,
                            /* :: */[
                              8,
                              /* :: */[
                                3,
                                /* :: */[
                                  6,
                                  /* :: */[
                                    7,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ])));

console.log(stringOfUniques);

console.log($$Array.of_list(stringOfUniques));

function nth(_index, _list) {
  while(true) {
    var list = _list;
    var index = _index;
    if (list) {
      if (index <= 0) {
        return Caml_option.some(list[0]);
      } else {
        _list = list[1];
        _index = index - 1 | 0;
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

console.log(nth(1, /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ]));

function isIsogram(inputString) {
  var lowercaseString = $$String.lowercase(inputString);
  return List.length(List.sort_uniq(Caml_obj.caml_compare, $$Array.to_list(inputString.split("")))) === lowercaseString.length;
}

console.log(isIsogram("supp"));

var OutOfRange = Caml_exceptions.create("Day3HomeworkRecap-Day3.OutOfRange");

function ones(param) {
  switch (param) {
    case 48 : 
        return "";
    case 49 : 
        return "I";
    case 50 : 
        return "II";
    case 51 : 
        return "III";
    case 52 : 
        return "IV";
    case 53 : 
        return "V";
    case 54 : 
        return "VI";
    case 55 : 
        return "VII";
    case 56 : 
        return "VIII";
    case 57 : 
        return "IX";
    default:
      throw [
            OutOfRange,
            "Expected a char between '0' and '9'"
          ];
  }
}

function tens(param) {
  switch (param) {
    case 48 : 
        return "";
    case 49 : 
        return "X";
    case 50 : 
        return "XX";
    case 51 : 
        return "XXX";
    case 52 : 
        return "XL";
    case 53 : 
        return "L";
    case 54 : 
        return "LX";
    case 55 : 
        return "LXX";
    case 56 : 
        return "LXXX";
    case 57 : 
        return "XC";
    default:
      throw [
            OutOfRange,
            "Expected a char between '0' and '9'"
          ];
  }
}

function hundreds(param) {
  switch (param) {
    case 48 : 
        return "";
    case 49 : 
        return "C";
    case 50 : 
        return "CC";
    case 51 : 
        return "CCC";
    case 52 : 
        return "CD";
    case 53 : 
        return "D";
    case 54 : 
        return "DC";
    case 55 : 
        return "DCC";
    case 56 : 
        return "DCCC";
    case 57 : 
        return "CM";
    default:
      throw [
            OutOfRange,
            "Expected a char between '0' and '9'"
          ];
  }
}

function thousands(param) {
  switch (param) {
    case 48 : 
        return "";
    case 49 : 
        return "M";
    case 50 : 
        return "MM";
    case 51 : 
        return "MMM";
    default:
      throw [
            OutOfRange,
            "Expected a char between '0' and '3'"
          ];
  }
}

function toRoman(i) {
  var str = String(i);
  var match = str.length;
  switch (match) {
    case 1 : 
        return ones(Caml_string.get(str, 0));
    case 2 : 
        return tens(Caml_string.get(str, 0)) + ones(Caml_string.get(str, 1));
    case 3 : 
        return hundreds(Caml_string.get(str, 0)) + (tens(Caml_string.get(str, 1)) + ones(Caml_string.get(str, 2)));
    case 4 : 
        return thousands(Caml_string.get(str, 0)) + (hundreds(Caml_string.get(str, 1)) + (tens(Caml_string.get(str, 2)) + ones(Caml_string.get(str, 3))));
    default:
      throw [
            OutOfRange,
            "Expected an int between 1 and 4 digits"
          ];
  }
}

console.log(toRoman(31));

exports.stringOfUniques = stringOfUniques;
exports.nth = nth;
exports.isIsogram = isIsogram;
exports.OutOfRange = OutOfRange;
exports.ones = ones;
exports.tens = tens;
exports.hundreds = hundreds;
exports.thousands = thousands;
exports.toRoman = toRoman;
/* stringOfUniques Not a pure module */
