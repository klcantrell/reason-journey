// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

console.log("Hello, BuckleScript and Reason!");

console.log("\nFloat arithmetic");

console.log(2.0 + 2.0);

console.log("\nString concatenation");

console.log("Hi String Concat " + String(1));

console.log("\nMultiline strings");

console.log("Multiline\nStrings\nAre\nCool");

console.log("\nString interpolation w/ BuckleScript");

var myName = "Kalalau";

console.log("Hi " + (String(myName) + ""));

console.log("\nEquality");

console.log("Structural equality: [1, 2, 3] == [1, 2, 3]");

console.log(Caml_obj.caml_equal(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ], /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ]));

console.log("Referential equality: [1, 2, 3] === [1, 2, 3]");

console.log(/* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          3,
          /* [] */0
        ]
      ]
    ] === /* :: */[
      1,
      /* :: */[
        2,
        /* :: */[
          3,
          /* [] */0
        ]
      ]
    ]);

console.log("\nArithmetic");

console.log(3);

console.log(20.0 * 1e3);

console.log("\nConditionals");

var conditionallyAssignThis = "Hey";

console.log(conditionallyAssignThis);

console.log("\nBindings");

var testBinding = "yo";

console.log("man");

console.log(testBinding);

var lastExpressionIsReturned = "kal cantrell";

console.log(lastExpressionIsReturned);

console.log("\nTuples");

console.log("Kal");

console.log("Destructuring tuples");

console.log(23);

console.log(23);

console.log("\nRecords");

var whoAmI = /* record */[
  /* name */"kal",
  /* age */31
];

console.log(31);

var rocketToMars = /* record */[
  /* rocketType */"SpaceX Falcon 9",
  /* destination */"Moon",
  /* fuelType */"RP-1"
];

rocketToMars[/* destination */1] = "Mars";

console.log(rocketToMars);

var marsDestination = /* record */[
  /* destinationName */"Mars",
  /* constellation */"Pisces",
  /* coordinates : record */[
    /* ra : tuple */[
      "21h",
      "10m",
      "44s"
    ],
    /* dec : tuple */[
      "52deg",
      "53min",
      "11s"
    ]
  ]
];

console.log(marsDestination);

console.log("\nVariants");

console.log(/* That */1);

var myPointInstance = /* Point */[
  2.3,
  3.4
];

console.log(myPointInstance);

console.log(/* Rectangle */Block.__(0, [
        /* Point */[
          1.2,
          3.4
        ],
        /* Point */[
          6.7,
          5.4
        ]
      ]));

console.log("\nOption type");

console.log("\nPattern Matching and destructuring");

var greeting = "yo";

console.log(greeting);

function isKal(name) {
  return name === "Kal";
}

var result = "First " + String(3);

console.log(result);

console.log("\nExercises");

function exchange(num) {
  var first = num / 10 | 0;
  var second = num % 10;
  return Caml_int32.imul(second, 10) + first | 0;
}

console.log(exchange(73));

var myFirstTuple = /* tuple */[
  "Kal",
  23
];

var tupVal1 = "Kal";

var tupVal2 = 23;

var onlyWantTup2 = 23;

var me = /* record */[/* name */"Kal"];

var myRecordInstance = /* record */[/* myField : tuple */[
    "sup",
    "yo"
  ]];

var myTuple = /* tuple */[
  1,
  3
];

exports.myName = myName;
exports.conditionallyAssignThis = conditionallyAssignThis;
exports.testBinding = testBinding;
exports.lastExpressionIsReturned = lastExpressionIsReturned;
exports.myFirstTuple = myFirstTuple;
exports.tupVal1 = tupVal1;
exports.tupVal2 = tupVal2;
exports.onlyWantTup2 = onlyWantTup2;
exports.whoAmI = whoAmI;
exports.rocketToMars = rocketToMars;
exports.marsDestination = marsDestination;
exports.myPointInstance = myPointInstance;
exports.me = me;
exports.myRecordInstance = myRecordInstance;
exports.greeting = greeting;
exports.myTuple = myTuple;
exports.isKal = isKal;
exports.result = result;
exports.exchange = exchange;
/*  Not a pure module */
